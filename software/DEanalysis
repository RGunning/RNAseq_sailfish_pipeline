#.libPaths( c( .libPaths(), "/nfs/users/nfs_r/rg12/R/x86_64-unknown-linux-gnu-library/3.0") )

args <- commandArgs(trailingOnly = TRUE)
hh <- paste(unlist(args),collapse=' ')

listoptions <- unlist(strsplit(hh,'--'))[-1]
options.args <- lapply(listoptions,function(x){
  unlist(strsplit(x, ' '))[-1]
})
options.names <- lapply(listoptions,function(x){
  unlist(strsplit(x, ' '))[1]
})
names(options.args) <- unlist(options.names)

library("DESeq2")
#library("ReportingTools")
library("edgeR")
#library("RColorBrewer")
#library("gplots")
#library("VennDiagram")
#library("stringr")
#library("plyr")

par(mfrow=c(1,1))
edgerfdr <- 0.001
deseq2padj <- 0.001

designmat <- cbind(options.args$filenames,options.args$strain,options.args$cell,options.args$sex,options.args$fastq)
designmat<-designmat[which(options.args$strain=="B"& options.args$fastq=="FALSE"),]
inputfiles <- options.args$inputfiles[which(options.args$strain=="B"& options.args$fastq=="FALSE")]

# Reformat designmatrix
#designmat <- t(designmat)
strain    <- factor(designmat[,2])
cell      <- factor(designmat[,3])
sex    <- factor(designmat[,4])
colData <- data.frame(strain=strain,cell=cell,sex=sex)


# Initialise blank count matrix and design matrix
file <- inputfiles[1]
x <- read.table(file,header=FALSE,as.is=TRUE)
Count.Matrix <- data.frame(Row.names=x[,1])
TPM.Matrix <- data.frame(Row.names=x[,1])

for (i in 1:length(inputfiles)){
  file <- inputfiles[i]
  print(file)
  # Read table
  x <- read.table(file,header=TRUE,as.is=TRUE)
  Count.Matrix <- merge(Count.Matrix,   x[,c(1,5)], by.x= "Row.names", by.y= 1)
  TPM.Matrix <- merge(TPM.Matrix,   x[,c(1,3)], by.x= "Row.names", by.y= 1)
  
  names(Count.Matrix)[i+1] <- names(TPM.Matrix)[i+1] <- paste(designmat[i,1],designmat[i,2],designmat[i,3],designmat[i,4],sep = "_")
}

rownames(Count.Matrix) <- Count.Matrix$Row.names
rownames(TPM.Matrix) <- TPM.Matrix$Row.names
Count.Matrix$Row.names <- TPM.Matrix$Row.names <- NULL

# Save Spikeins Seperately,then Remove Spikeins
SpikeINS <- Count.Matrix[(row(Count.Matrix)[,1] %in% grep("ERCC",rownames(Count.Matrix))),]
Count.Matrix <- Count.Matrix[!(row(Count.Matrix)[,1] %in% grep("ERCC",rownames(Count.Matrix))),]

# Convert to integer counts
integer.counts <- round(Count.Matrix,digits=0)

## DESeq2
################################################################################
##WORKS
dds <- DESeqDataSetFromMatrix(countData=integer.counts, colData=colData, design= ~ sex +  cell)
colData(dds)$sex  <- factor(colData(dds)$sex,levels=c("F","M"))
colData(dds)$cell <- factor(colData(dds)$cell,levels=c("B","T"))
colData(dds)$cell <- relevel(colData(dds)$cell, "B") # set B cell as base level
colnames(dds) <- colnames(integer.counts)

# Perform DESeq2 analysis
dds <- DESeq(dds)
results.cell <- results(dds)


#save results as dtable for later analysis
dtable <- data.frame(row.names=rownames(results.cell),FoldChange=results.cell$log2FoldChange,padj=results.cell$padj)
dtable$padj[is.na(dtable$padj)] <- 1 # convert NA padj to 1


## EdgeR
################################################################################


# create Design matrix
design <- model.matrix(object=~ sex + cell, data=colData)

y <- DGEList(counts=integer.counts,genes=rownames(integer.counts))

# Calculate Normal and Dispersion factors
y <- calcNormFactors(y)
y <- estimateGLMCommonDisp(y,design)
y <- estimateGLMTrendedDisp(y,design)
y <- estimateGLMTagwiseDisp(y,design)

fit <- glmFit(y,design)
lrt <- glmLRT(fit, coef="cellT") ## CHECK WHICH WAY ROUND EDGER IS TESTING

## Make a table of results
etable <- topTags(lrt, n=nrow(y))$table
etable <- etable[order(etable$FDR), ]
rownames(etable)<-etable$genes


# Comparison --------------------------------------------------------------

merged <- merge(etable, dtable, by='row.names',all=TRUE)

#merged.subset <- subset(merged, padj<=deseq2padj & FDR<=edgerfdr)

BLMR<-read.table(file="/nfs/users/nfs_r/rg12/B_LMRs.txt",header=TRUE)
TLMR<-read.table(file="/nfs/users/nfs_r/rg12/T_LMRs.txt",header=TRUE)

pvalueB <- merge(merged,BLMR,by.x="genes",by.y="Ensembl_Gene")
pvalueT <- merge(merged,TLMR,by.x="genes",by.y="Ensembl_Gene")

TPMB <- merge(TPM.Matrix,BLMR,by.x="row.names",by.y="Ensembl_Gene")
TPMT <- merge(TPM.Matrix,TLMR,by.x="row.names",by.y="Ensembl_Gene")

TPMBmeanB <- rowMeans(TPMB[,which(cell=="B")+1], na.rm = FALSE, dims = 1)
TPMBmeanT <- rowMeans(TPMB[,which(cell=="T")+1], na.rm = FALSE, dims = 1)

TPMTmeanB <- rowMeans(TPMT[,which(cell=="B")+1], na.rm = FALSE, dims = 1)
TPMTmeanT <- rowMeans(TPMT[,which(cell=="T")+1], na.rm = FALSE, dims = 1)

outfileBtmp <- data.frame(Gene=TPMB$Gene, Ensembl_ID=TPMB$Row.names, Type=TPMB$Type ,
                          place=TPMB$place,chr=TPMB$chr, Mean_TPM_Bcell=TPMBmeanB, 
                          Mean_TPM_Tcell=TPMBmeanT)
outfileBtmp2 <- merge(outfileBtmp,pvalueB,by.x="Ensembl_ID",by.y="genes")
outfileB <- data.frame(Gene=outfileBtmp2$Gene.x, Ensembl_ID=outfileBtmp2$Ensembl_ID, 
                       Type=outfileBtmp2$Type.x ,place=outfileBtmp2$place.x,chr=outfileBtmp2$chr.x,
                       Mean_TPM_Bcell=outfileBtmp2$Mean_TPM_Bcell, Mean_TPM_Tcell=outfileBtmp2$Mean_TPM_Tcell, 
                       edgeR_FC=outfileBtmp2$logFC ,edgeR_FDR=outfileBtmp2$FDR , DESeq2_FC=outfileBtmp2$FoldChange , 
                       DESeq2_padj=outfileBtmp2$padj)

outfileTtmp <- data.frame(Gene=TPMT$Gene, Ensembl_ID=TPMT$Row.names,  Type=TPMT$Type ,
                          place=TPMT$place,chr=TPMT$chr, Mean_TPM_Bcell=TPMTmeanB, 
                          Mean_TPM_Tcell=TPMTmeanT)
outfileTtmp2 <- merge(outfileTtmp,pvalueT,by.x="Ensembl_ID",by.y="genes")
outfileT <- data.frame(Gene=outfileTtmp2$Gene.x, Ensembl_ID=outfileTtmp2$Ensembl_ID, 
                       Type=outfileTtmp2$Type.x ,place=outfileTtmp2$place.x,chr=outfileTtmp2$chr.x, 
                       Mean_TPM_Bcell=outfileTtmp2$Mean_TPM_Bcell, Mean_TPM_Tcell=outfileTtmp2$Mean_TPM_Tcell, 
                       edgeR_FC=outfileTtmp2$logFC ,edgeR_FDR=outfileTtmp2$FDR , DESeq2_FC=outfileTtmp2$FoldChange , 
                       DESeq2_padj=outfileTtmp2$padj)

write.table(outfileB,file="BLMRs.txt",row.names=FALSE,col.names = TRUE,sep=",")
write.table(outfileT,file="TLMRs.txt",row.names=FALSE,col.names = TRUE,sep=",")

write.table(TPMB,"B_TPM.txt",row.names=FALSE,col.names = TRUE,sep=",")
write.table(TPMT,"T_TPM.txt",row.names=FALSE,col.names = TRUE,sep=",")

write.table(Count.Matrix,"CountMatrix.txt",row.names=TRUE,col.names=TRUE,sep=",")

TPMmeanB <- rowMeans(TPM.Matrix[,which(cell=="B")], na.rm = FALSE, dims = 1)
TPMmeanT <- rowMeans(TPM.Matrix[,which(cell=="T")], na.rm = FALSE, dims = 1)
TPMmean <- data.frame(TPMmeanB, TPMmeanT)
rownames(TPMmean) <- rownames(TPM.Matrix)

outfile <- merge(merged,TPMmean, by.x="genes", by.y="row.names")
write.table(outfile,"All.txt",row.names=FALSE,col.names=TRUE,sep=",")

