fname="clusters.zip"
library(stringr)
help<-function(){
cat("Usage: ExtractGname.R file\nExtract function for ngsplot\nFile can either be the zip file containing the RData file or the RData file directly\n")
q(status=1)
}
library(stringr)
help<-function(){
cat("Usage: ExtractGname.R file\nExtract function for ngsplot\nFile can either be the zip file containing the RData file or the RData file directly\n")
q(status=1)
}
if(grepl(".zip",fname)){
cat("zip")
help()
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(zip.fname, heatmap.dat))
} else if (grepl(".RData",fname)) {
cat("RData")
help()
load(fname)
} else {
help()
}
fname="clusters.zip"
if(grepl(".zip",fname)){
cat("zip")
help()
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(zip.fname, heatmap.dat))
} else if (grepl(".RData",fname)) {
cat("RData")
help()
load(fname)
} else {
help()
}
if(grepl(".zip",fname)){
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(zip.fname, heatmap.dat))
} else if (grepl(".RData",fname)) {
load(fname)
} else {
help()
}
if(grepl(".zip",fname)){
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (grepl(".RData",fname)) {
load(fname)
} else {
help()
}
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(fname, heatmap.dat))
setwd("/Volumes/lustre110/scratchpad")
if(grepl(".zip",fname)){
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (grepl(".RData",fname)) {
load(fname)
} else {
help()
}
strsplit(fname,".")
strsplit(fname,"'.')
strsplit(fname,'.')
strsplit(fname,'.')
""
"
strsplit(fname,'.')
strsplit(fname,'\.')
strsplit(fname,'.',T)
strsplit(fname,'.',T)[1]
strsplit(fname,'.',T)[[1]][1]
if(grepl(".zip",fname)){
root<-strsplit(fname,'.',T)[[1]][1]
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(root, heatmap.dat))
} else if (grepl(".RData",fname)) {
load(fname)
} else {
help()
}
if(grepl(".zip",fname)){
root<-strsplit(fname,'.',T)[[1]][1]
heatmap.dat <- file.path(root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (grepl(".RData",fname)) {
load(fname)
} else {
help()
}
source('~/.active-rstudio-document', echo=TRUE)
go.list[1]
go.list[2]
go.list[1][1]
View(go.list[1][1])
View(go.list[[1]][1])
length(go.list[[1]])
go.list[[2]]
library(stringr)
help<-function(){
cat("Usage: ExtractGname.R file\nExtract function for ngsplot\nFile can either be the zip file containing the RData file or the RData file directly\n")
q(status=1)
}
fname <- commandArgs(T)
fname<-"clusters.zip"
fname<-"out.RData"
if( length(fname) < 1 || length(fname) > 1){
help()
}
if(grepl(".zip",fname)){
root<-strsplit(fname,'.',T)[[1]][1]
heatmap.dat <- file.path(root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (grepl(".RData",fname)) {
load(fname)
} else {
help()
}
i=1
gene.list <- data.frame(gene=go.list[[1]][i],cluster=go.list[[2]][i], stringsAsFactors = FALSE)
gene.list <- data.frame(gene=go.list[[1]][i], stringsAsFactors = FALSE)
View(gene.list)
gene.list <- data.frame(gene=go.list[[1]][i], stringsAsFactors = FALSE)
gene.list<-as.data.frame(list(str_split_fixed(gene.list[,1],":",2),gene.list[,2]))
gene.list <- data.frame(gene=go.list[[1]][i], stringsAsFactors = FALSE)
gene.list <- as.data.frame(list(str_split_fixed(gene.list[,1],":",2),gene.list[,2]))
gene.list <- data.frame(gene=go.list[[1]][i], stringsAsFactors = FALSE)
gene.list <- as.data.frame(str_split_fixed(gene.list[,1],":",2)
)
View(gene.list)
gene.list <- data.frame(go.list[[1]][i], stringsAsFactors = FALSE)
strsplit(gene.list[,1], ':')
gname.list <- strsplit(gene.list[,1], ':')
gname.list <- sapply(gname.list, function(x) x[1])
gname.list <- strsplit(gene.list[,1], ':')
gene.list <- data.frame(go.list[[1]][i], stringsAsFactors = FALSE)
gname.list <- strsplit(gene.list[,1], ':')
sapply(gname.list, function(x) x[1:2])
gene.list <- as.data.frame(gname.list)
View(gene.list)
gene.list <- as.data.frame(str_split_fixed(gene.list[,1],":",2))
View(gene.list)
gene.list <- data.frame(go.list[[1]][i], stringsAsFactors = FALSE)
gene.list <- as.data.frame(str_split_fixed(gene.list[,1],":",2))
View(gene.list)
gname.list <- strsplit(gene.list[,1], ':')
gname.list <- lapply(gname.list, function(x) x[1:2])
gene.list <- as.data.frame(gname.list)
View(gene.list)
?sapply
gname.list <- sapply(gname.list, function(x) x[1:2])
gname.list <- strsplit(gene.list[,1], ':')
gname.list <- vapply(gname.list, function(x) x[1:2])
gname.list <- strsplit(gene.list[,1], ':')
gname.list <- sapply(gname.list, function(x) x[1:2],simplify=T)
View(gname.list)
gname.list <- strsplit(gene.list[,1], ':')
gname.list <- strsplit(gene.list[,1], ':')
i
gene.list <- data.frame(go.list[[1]][i], stringsAsFactors = FALSE)
gname.list <- strsplit(gene.list[,1], ':')
gene.list <- data.frame(go.list[[1]][i], stringsAsFactors = FALSE)
gsub("(.*)\\:(.*)","\\1",gene.list[,1])
gsub <-
d
?gsub
View(gene.list)
gene.list <- data.frame(go.list[[1]][i], stringsAsFactors = FALSE)
gname.list <- strsplit(gene.list[,1], ':')
gene.list <- data.frame(do.call(rbind, gname.list))
View(gene.list)
help<-function(){
cat("Usage: ExtractGname.R file\nExtract function for ngsplot\nFile can either be the zip file containing the RData file or the RData file directly\n")
q(status=1)
}
fname <- commandArgs(T)
fname<-"clusters.zip"
if( length(fname) < 1 || length(fname) > 1){
help()
}
if(grepl(".zip",fname)){
root<-strsplit(fname,'.',T)[[1]][1]
heatmap.dat <- file.path(root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (grepl(".RData",fname)) {
root<-strsplit(fname,'.',T)[[1]][1]
load(fname)
} else { #assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname,"zip",sep='.'), heatmap.dat))
}
load("/Volumes/lustre110/scratchpad/tmp.RData")
source('/Volumes/lustre110/scratchpad/ExtractGName.R', echo=TRUE)
help<-function(){
cat("Usage: ExtractGname.R file\nExtract function for ngsplot\nFile can either be the zip file containing the RData file or the RData file directly\n")
q(status=1)
}
fname <- commandArgs(T)
fname<-"tmp.RData"
if( length(fname) < 1 || length(fname) > 1){
help()
}
if(grepl(".zip",fname)){
root<-strsplit(fname,'.',T)[[1]][1]
heatmap.dat <- file.path(root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (grepl(".RData",fname)) {
root<-strsplit(fname,'.',T)[[1]][1]
load(fname)
} else { #assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname,"zip",sep='.'), heatmap.dat))
}
###Step through
i=1
if(is.na(go.list[[2]][i])){ #no cluster information
gene.list <- data.frame(go.list[[1]][i], stringsAsFactors = FALSE)
gname.list <- strsplit(gene.list[,1], ':')
gene.list <- data.frame(do.call(rbind, gname.list))
write.table(gene.list, file=paste(root, i,'gene_name.txt', sep='.'),
col.names=F, row.names=F)
} else{ # With Clusters
gene.list <- data.frame(gene=go.list[[1]][i],cluster=go.list[[2]][i], stringsAsFactors = FALSE)
gname.list <- strsplit(gene.list[,1], ':')
gene.list <- data.frame(do.call(rbind, gname.list),gene.list[,2]))
gene.list <- data.frame(gene=go.list[[1]][i],cluster=go.list[[2]][i], stringsAsFactors = FALSE)
gname.list <- strsplit(gene.list[,1], ':')
gene.list <- data.frame(do.call(rbind, gname.list),gene.list[,2]))
source('/Volumes/lustre110/scratchpad/ExtractGName.R', echo=TRUE)
source('~/Documents/PhD/R code/H3K4me3_cluster analysis.R', echo=TRUE)
source('~/Documents/PhD/R code/H3K4me3_cluster analysis.R', echo=TRUE)
source('~/Documents/PhD/R code/H3K4me3_cluster analysis.R', echo=TRUE)
out<-plotclusters(4)
out<-defineclusters(4)
out[[1]]
library(RCurl)
x <- getURL("https://cweb4.clare.cam.ac.uk/rooms/hens-owng6732sdsalsdjhbewq/gradinfo.csv")
y <- read.csv(text = x)
source('~/Documents/PhD/R code/H3K4me3_cluster analysis.R', echo=TRUE)
source('~/Documents/PhD/R code/H3K4me3_cluster analysis.R', echo=TRUE)
mergedtabs <- mergetables()
all <- mergedtabs[[1]]
jlist <- mergedtabs[[2]]
clustertable <- addmargins(table(Bcell=all$Bcluster==cluster, Tcell=all$Tcluster==jlist[[cluster]]))
Cluster1<-all[all$Bcluster==cluster|all$Tcluster==jlist[[cluster]],]
overlap <-Cluster1[Cluster1$Bcluster ==cluster & Cluster1$Tcluster==jlist[[cluster]],]
len<-length(overlap$Ensembl.Gene.ID)
bxp<-boxplot(overlap$TPMmeanB,overlap$TPMmeanT,plot=F)
plot(overlap$TPMmeanB[order(overlap$TPMmeanB)],xlab = "Genes",ylab="TPM",pch = 20,type="n",main = paste("Cluster",cluster,sep=" "),xaxt='n',ylim=c(min(bxp$stats[1,])*2,max(bxp$stats[5,])*2))
boxplot(overlap$TPMmeanB,overlap$TPMmeanT,names=c("B cell","T cell"),col = c(rgb(0,1,0,0.3),rgb(0,0,1,0.3)),add = T,at=c(1*len/4,3*len/4),boxwex=len/8,pch='.')
lines(overlap$TPMmeanB[order(overlap$TPMmeanB)],col = "Green")
points(overlap$TPMmeanT[order(overlap$TPMmeanB)],col = "Blue",pch=20,cex=.5)
legend(x = "bottomright",legend = c(paste("B cell:",round(bxp$stats[3,1],2),sep=" "),paste("T cell:",round(bxp$stats[3,2],2),sep=" ")),pch=20,col=c("Green","blue"))
cluster=4
mergedtabs <- mergetables()
all <- mergedtabs[[1]]
jlist <- mergedtabs[[2]]
clustertable <- addmargins(table(Bcell=all$Bcluster==cluster, Tcell=all$Tcluster==jlist[[cluster]]))
clustertable
Cluster1<-all[all$Bcluster==cluster|all$Tcluster==jlist[[cluster]],]
overlap <-Cluster1[Cluster1$Bcluster ==cluster & Cluster1$Tcluster==jlist[[cluster]],]
len<-length(overlap$Ensembl.Gene.ID)
bxp<-boxplot(overlap$TPMmeanB,overlap$TPMmeanT,plot=F)
plot(overlap$TPMmeanB[order(overlap$TPMmeanB)],xlab = "Genes",ylab="TPM",pch = 20,type="n",main = paste("Cluster",cluster,sep=" "),xaxt='n',ylim=c(min(bxp$stats[1,])*2,max(bxp$stats[5,])*2))
boxplot(overlap$TPMmeanB,overlap$TPMmeanT,names=c("B cell","T cell"),col = c(rgb(0,1,0,0.3),rgb(0,0,1,0.3)),add = T,at=c(1*len/4,3*len/4),boxwex=len/8,pch='.')
lines(overlap$TPMmeanB[order(overlap$TPMmeanB)],col = "Green")
points(overlap$TPMmeanT[order(overlap$TPMmeanB)],col = "Blue",pch=20,cex=.5)
legend(x = "bottomright",legend = c(paste("B cell:",round(bxp$stats[3,1],2),sep=" "),paste("T cell:",round(bxp$stats[3,2],2),sep=" ")),pch=20,col=c("Green","blue"))
plot(overlap$TPMmeanB[order(overlap$TPMmeanB)],xlab = "Genes",ylab="TPM",pch = 20,type="n",main = paste("Cluster",cluster,sep=" "),xaxt='n',ylim=c(min(bxp$stats[1,])*2,max(bxp$stats[5,])*2))
lines(overlap$TPMmeanB[order(overlap$TPMmeanB)],col = "Green")
points(overlap$TPMmeanT[order(overlap$TPMmeanB)],col = "Blue",pch=20,cex=.5)
boxplot(overlap$TPMmeanB,overlap$TPMmeanT,names=c("B cell","T cell"),col = c(rgb(0,1,0,0.3),rgb(0,0,1,0.3)),add = T,at=c(1*len/4,3*len/4),boxwex=len/8,pch='.')
legend(x = "bottomright",legend = c(paste("B cell:",round(bxp$stats[3,1],2),sep=" "),paste("T cell:",round(bxp$stats[3,2],2),sep=" ")),pch=20,col=c("Green","blue"))
source('~/Documents/PhD/R code/H3K4me3_cluster analysis.R', echo=TRUE)
?kmeans
source('~/Documents/PhD/R code/H3K4me3_cluster analysis.R', echo=TRUE)
install.packages(VennDiagram)
install.packages('VennDiagram')
source('~/Documents/PhD/R code/H3K4me3_cluster analysis.R', echo=TRUE)
install.packages('Cairo')
source('~/Documents/PhD/R code/H3K4me3_cluster analysis.R', echo=TRUE)
source('~/Documents/PhD/R code/H3K4me3_cluster analysis.R', echo=TRUE)
plotclusters(cluster=1)
plotclusters(cluster=1)
source('~/Documents/PhD/R code/H3K4me3_cluster analysis.R', echo=TRUE)
cluster=1
mergedtabs <- mergetables()
all <- mergedtabs[[1]]
jlist <- mergedtabs[[2]]
clustertable <- addmargins(table(Bcell=all$Bcluster==cluster, Tcell=all$Tcluster==jlist[[cluster]]))
### Venn Diagram
png(paste("/Users/rg12/Google Drive/PhD/RNAseqChIPSeq_Figs/out",cluster,".png",sep=""),width = 6, height = 4, units = "in",res=72,bg = "transparent")
plot.new()
draw.pairwise.venn(area1=clustertable[2,3],
area2=clustertable[3,2],
cross.area=clustertable[2,2],
category=c("B cell","T cell"),
scaled=TRUE,
fill=c("Green","Blue"),
cat.pos=c(-135,135),
cat.dist=.1,
cat.cex=2,mar=.2)
dev.off()
clustertable
Cluster1<-all[all$Bcluster==cluster|all$Tcluster==jlist[[cluster]],]
bxp<-boxplot(Cluster1$TPMmeanB,Cluster1$TPMmeanT,plot=F,names=c("B cell","T cell"),range = 0)
png(paste("/Users/rg12/Google Drive/PhD/RNAseqChIPSeq_Figs/TPM_",cluster,".png",sep=""),width = 12, height = 8, units = "in",res=72,bg = "transparent")
plot.new()
plot(y=Cluster1$TPMmeanT,x=Cluster1$TPMmeanB,
xlab = "TPM B cell",ylab="TPM T cell",
pch = 20,type="p",col = "Blue",cex=.5,
main = paste("Cluster",cluster,sep=" "))#,ylim=c(min(bxp$stats[1,2]),max(bxp$stats[5,2])),xlim=c(min(bxp$stats[1,1]),max(bxp$stats[5,1])))
#bxp<-boxplot(Cluster1$TPMmeanB,Cluster1$TPMmeanT,names=c("B cell","T cell"),col = c(rgb(0,1,0,0.3),rgb(0,0,1,0.3)),add = T,at=c(1*len/4,3*len/4),boxwex=len/8,pch='.')
legend(x = "bottomright",legend = c(paste("B cell:",round(bxp$stats[3,1],2),sep=" "),paste("T cell:",round(bxp$stats[3,2],2),sep=" ")),pch=20,col=c("Green","blue"))
dev.off()
bxp$stats <- rbind(bxp$stats,c(mean(Cluster1$TPMmeanB),mean(Cluster1$TPMmeanT)))
rownames(bxp$stats) <- c("Min","Lower Quartile", "Median","Upper Quartile","Max","Mean")
colnames(bxp$stats) <- bxp$names
write.table(bxp$stats,paste("/Users/rg12/Google Drive/PhD/RNAseqChIPSeq_Figs/All_stats",cluster,".txt",sep=""),quote = F)
overlap <-Cluster1[Cluster1$Bcluster ==cluster & Cluster1$Tcluster==jlist[[cluster]],]
len<-length(overlap$Ensembl.Gene.ID)
#  png(paste("/Users/rg12/Google Drive/PhD/RNAseqChIPSeq_Figs/TPMoverlap_box_",cluster,".png",sep=""),width = 6, height = 4, units = "in",res=72,bg = "transparent")
#  plot.new()
#  boxplot(log2(overlap$TPMmeanB),log2(overlap$TPMmeanT),names=c("B cell","T cell"),ylab="log2(TPM)",main = paste("Cluster",cluster,sep=" "),col = c("green","blue"))
#
#  dev.off()
png(paste("/Users/rg12/Google Drive/PhD/RNAseqChIPSeq_Figs/TPM_overlap_",cluster,".png",sep=""),width = 12, height = 8, units = "in",res=72,bg = "transparent")
plot.new()
plot(y=overlap$TPMmeanT,x=overlap$TPMmeanB,
xlab = "TPM B cell",ylab="TPM T cell",
pch = 20,type="p",col = "Blue",cex=.5,
main = paste("Cluster",cluster,sep=" "))#,ylim=c(min(bxp$stats[1,2]),max(bxp$stats[5,2])),xlim=c(min(bxp$stats[1,1]),max(bxp$stats[5,1])))
#bxp<-boxplot(Cluster1$TPMmeanB,Cluster1$TPMmeanT,names=c("B cell","T cell"),col = c(rgb(0,1,0,0.3),rgb(0,0,1,0.3)),add = T,at=c(1*len/4,3*len/4),boxwex=len/8,pch='.')
legend(x = "bottomright",legend = c(paste("B cell:",round(bxp$stats[3,1],2),sep=" "),paste("T cell:",round(bxp$stats[3,2],2),sep=" ")),pch=20,col=c("Green","blue"))
dev.off()
bxp<-boxplot(overlap$TPMmeanB,overlap$TPMmeanT,plot=F,range = 0)
png(paste("/Users/rg12/Google Drive/PhD/RNAseqChIPSeq_Figs/TPMoverlap_",cluster,".png",sep=""),width = 12, height = 8, units = "in",res=72,bg = "transparent")
plot.new()
plot(overlap$TPMmeanT[order(overlap$TPMmeanB)],xlab = "Genes",ylab="TPM",pch = 20,type="p",col = "Blue",cex=.5,main = paste("Cluster",cluster,sep=" "),xaxt='n')#,ylim=c(min(bxp$stats[1,])*2,max(bxp$stats[5,])*2))
lines(overlap$TPMmeanB[order(overlap$TPMmeanB)],col = "Green")
boxplot(overlap$TPMmeanB,overlap$TPMmeanT,names=c("B cell","T cell"),col = c(rgb(0,1,0,0.3),rgb(0,0,1,0.3)),add = T,at=c(1*len/4,3*len/4),boxwex=len/8,pch='.')
legend(x = "bottomright",legend = c(paste("B cell:",round(bxp$stats[3,1],2),sep=" "),paste("T cell:",round(bxp$stats[3,2],2),sep=" ")),pch=20,col=c("Green","blue"))
dev.off()
bxp<-boxplot(overlap$TPMmeanB,overlap$TPMmeanT,plot=F,range = 0)
bxp$stats <- rbind(bxp$stats,c(mean(overlap$TPMmeanB),mean(overlap$TPMmeanT)))
rownames(bxp$stats) <- c("Min","Lower Quartile", "Median","Upper Quartile","Max","Mean")
colnames(bxp$stats) <- bxp$names
write.table(bxp$stats,paste("/Users/rg12/Google Drive/PhD/RNAseqChIPSeq_Figs/Overlap_stats",cluster,".txt",sep=""),quote = F)
png(paste("/Users/rg12/Google Drive/PhD/RNAseqChIPSeq_Figs/TPMoverlap_foldchange_",cluster,".png",sep=""),width = 6, height = 4, units = "in",res=72,bg = "transparent")
plot.new()
plot(overlap$FoldChange[order(overlap$TPMmeanB)],xlab = "Genes",ylab="Fold Change",pch = 20,cex=.5,type="p",main = paste("Cluster",cluster,sep=" "),xaxt='n')
boxplot(overlap$FoldChange,add=T,at=len/2,boxwex=len/4,pch='.')
dev.off()
Bonly <-Cluster1[!Cluster1$Tcluster==jlist[[cluster]],] #B only
len<-length(Bonly$Ensembl.Gene.ID)
# png(paste("/Users/rg12/Google Drive/PhD/RNAseqChIPSeq_Figs/TPM_Bonly_box_",cluster,".png",sep=""),width = 6, height = 4, units = "in",res=72,bg = "transparent")
# plot.new()
# boxplot(log2(Bonly$TPMmeanB),log2(Bonly$TPMmeanT),names=c("B cell","T cell"),ylab="Log2(TPM)",main = paste("Cluster",cluster,sep=" "),col = c("green","blue"))
# dev.off()
bxp<-boxplot(Bonly$TPMmeanB,Bonly$TPMmeanT,plot=F,range = 0)
png(paste("/Users/rg12/Google Drive/PhD/RNAseqChIPSeq_Figs/TPM_Bonly_",cluster,".png",sep=""),width = 6, height = 4, units = "in",res=72,bg = "transparent")
plot.new()
plot(Bonly$TPMmeanB[order(Bonly$TPMmeanB)],xlab = "Genes",ylab="TPM",pch = 20,type="n",main = paste("Cluster",cluster,sep=" "),xaxt='n')#,ylim=c(min(bxp$stats[1,])*2,max(bxp$stats[5,])*2))
points(Bonly$TPMmeanT[order(Bonly$TPMmeanB)],col = "Blue",pch=20,cex=.5)
lines(Bonly$TPMmeanB[order(Bonly$TPMmeanB)],col = "Green",lwd=1.5)
boxplot(Bonly$TPMmeanB,Bonly$TPMmeanT,names=c("B cell","T cell"),col = c(rgb(0,1,0,0.3),rgb(0,0,1,0.3)),add = T,at=c(1*len/4,3*len/4),boxwex=len/8,pch='.')
legend(x = "bottomright",legend = c(paste("B cell:",round(bxp$stats[3,1],2),sep=" "),paste("T cell:",round(bxp$stats[3,2],2),sep=" ")),pch=20,col=c("Green","blue"))
dev.off()
png(paste("/Users/rg12/Google Drive/PhD/RNAseqChIPSeq_Figs/TPM_Bonly_foldchange_",cluster,".png",sep=""),width = 6, height = 4, units = "in",res=72,bg = "transparent")
plot.new()
plot(Bonly$FoldChange[order(Bonly$TPMmeanB)],xlab = "Genes",ylab="Fold Change",pch = 20,type="p",main = paste("Cluster",cluster,sep=" "),xaxt='n')
boxplot(Bonly$FoldChange,add=T,at=len/2,boxwex=len/4,pch='.')
dev.off()
Tonly <-Cluster1[!Cluster1$Bcluster==cluster,] #T only
len<-length(Tonly$Ensembl.Gene.ID)
bxp<-boxplot(Tonly$TPMmeanB,Tonly$TPMmeanT,plot=F,range = 0)
# png(paste("/Users/rg12/Google Drive/PhD/RNAseqChIPSeq_Figs/TPM_Tonly_box_",cluster,".png",sep=""),width = 6, height = 4, units = "in",res=72,bg = "transparent")
#plot.new()
# boxplot(log2(Tonly$TPMmeanB),log2(Tonly$TPMmeanT),names=c("B cell","T cell"),ylab="Log2(TPM)",main = paste("Cluster",cluster,sep=" "),col = c("green","blue"))
#dev.off()
png(paste("/Users/rg12/Google Drive/PhD/RNAseqChIPSeq_Figs/TPM_Tonly_",cluster,".png",sep=""),width = 6, height = 4, units = "in",res=72,bg = "transparent")
plot.new()
plot(Tonly$TPMmeanB[order(Tonly$TPMmeanT)],xlab = "Genes",ylab="TPM",pch = 20,cex=.5,col = "Green",type="p",main = paste("Cluster",cluster,sep=" "),xaxt='n')#,ylim=c(min(bxp$stats[1,])*2,max(bxp$stats[5,])*2))
lines(Tonly$TPMmeanT[order(Tonly$TPMmeanT)],col = "Blue",lwd=1.5)
boxplot(Tonly$TPMmeanB,Tonly$TPMmeanT,names=c("B cell","T cell"),col = c(rgb(0,1,0,0.3),rgb(0,0,1,0.3)),add = T,at=c(1*len/4,3*len/4),boxwex=len/8,pch='.')
legend(x = "bottomright",legend = c(paste("B cell:",round(bxp$stats[3,1],2),sep=" "),paste("T cell:",round(bxp$stats[3,2],2),sep=" ")),pch=20,col=c("Green","blue"))
dev.off()
fchange(Tonly$FoldChange,Tonly$TPMmeanT,"TPM_Tonly_foldchange")
plotclusters(2)
plotclusters(3)
plotclusters(4)
cluster=1
mergedtabs <- mergetables()
all <- mergedtabs[[1]]
jlist <- mergedtabs[[2]]
clustertable <- addmargins(table(Bcell=all$Bcluster==cluster, Tcell=all$Tcluster==jlist[[cluster]]))
Cluster1<-all[all$Bcluster==cluster|all$Tcluster==jlist[[cluster]],]
bxp<-boxplot(Cluster1$TPMmeanB,Cluster1$TPMmeanT,plot=F,names=c("B cell","T cell"),range = 0)
verlap <-Cluster1[Cluster1$Bcluster ==cluster & Cluster1$Tcluster==jlist[[cluster]],]
len<-length(overlap$Ensembl.Gene.ID)
#  png(paste("/Users/rg12/Google Drive/PhD/
plot(y=overlap$TPMmeanT,x=overlap$TPMmeanB,
xlab = "TPM B cell",ylab="TPM T cell",
pch = 20,type="p",col = "Blue",cex=.5,
main = paste("Cluster",cluster,sep=" "))#,ylim=c(min(bxp$stats[1,2]),max(bxp$stats[5,2])),xlim=c(min(bxp$stats[1,1]),max(bxp$stats[5,1])))
#bxp<-boxplot(Cluster1$TPMmeanB,Cluster1$TPMmeanT,names=c("B cell","T cell"),col = c(rgb(0,1,0,0.3),rgb(0,0,1,0.3)),add = T,at=c(1*len/4,3*len/4),boxwex=len/8,pch='.')
legend(x = "bottomright",legend = c(paste("B cell:",round(bxp$stats[3,1],2),sep=" "),paste("T cell:",round(bxp$stats[3,2],2),sep=" ")),pch=20,col=c("Green","blue"))
plot(y=overlap$TPMmeanT,x=overlap$TPMmeanB,
xlab = "TPM B cell",ylab="TPM T cell",
pch = 20,type="p",col = "Blue",cex=.5,
main = paste("Cluster",cluster,sep=" "),
log='xy')#,ylim=c(min(bxp$stats[1,2]),max(bxp$stats[5,2])),xlim=c(min(bxp$stats[1,1]),max(bxp$stats[5,1])))
#bxp<-boxplot(Cluster1$TPMmeanB,Cluster1$TPMmeanT,names=c("B cell","T cell"),col = c(rgb(0,1,0,0.3),rgb(0,0,1,0.3)),add = T,at=c(1*len/4,3*len/4),boxwex=len/8,pch='.')
legend(x = "bottomright",legend = c(paste("B cell:",round(bxp$stats[3,1],2),sep=" "),paste("T cell:",round(bxp$stats[3,2],2),sep=" ")),pch=20,col=c("Green","blue"))
cluster=2
mergedtabs <- mergetables()
all <- mergedtabs[[1]]
jlist <- mergedtabs[[2]]
clustertable <- addmargins(table(Bcell=all$Bcluster==cluster, Tcell=all$Tcluster==jlist[[cluster]]))
Cluster1<-all[all$Bcluster==cluster|all$Tcluster==jlist[[cluster]],]
bxp<-boxplot(Cluster1$TPMmeanB,Cluster1$TPMmeanT,plot=F,names=c("B cell","T cell"),range = 0)
verlap <-Cluster1[Cluster1$Bcluster ==cluster & Cluster1$Tcluster==jlist[[cluster]],]
len<-length(overlap$Ensembl.Gene.ID)
#  png(paste("/Users/rg12/Google Drive/PhD/
plot(y=overlap$TPMmeanT,x=overlap$TPMmeanB,
xlab = "TPM B cell",ylab="TPM T cell",
pch = 20,type="p",col = "Blue",cex=.5,
main = paste("Cluster",cluster,sep=" "))#,ylim=c(min(bxp$stats[1,2]),max(bxp$stats[5,2])),xlim=c(min(bxp$stats[1,1]),max(bxp$stats[5,1])))
#bxp<-boxplot(Cluster1$TPMmeanB,Cluster1$TPMmeanT,names=c("B cell","T cell"),col = c(rgb(0,1,0,0.3),rgb(0,0,1,0.3)),add = T,at=c(1*len/4,3*len/4),boxwex=len/8,pch='.')
legend(x = "bottomright",legend = c(paste("B cell:",round(bxp$stats[3,1],2),sep=" "),paste("T cell:",round(bxp$stats[3,2],2),sep=" ")),pch=20,col=c("Green","blue"))
plot(y=overlap$TPMmeanT,x=overlap$TPMmeanB,
xlab = "TPM B cell",ylab="TPM T cell",
pch = 20,type="p",col = "Blue",cex=.5,
main = paste("Cluster",cluster,sep=" "),
log='xy')#,ylim=c(min(bxp$stats[1,2]),max(bxp$stats[5,2])),xlim=c(min(bxp$stats[1,1]),max(bxp$stats[5,1])))
#bxp<-boxplot(Cluster1$TPMmeanB,Cluster1$TPMmeanT,names=c("B cell","T cell"),col = c(rgb(0,1,0,0.3),rgb(0,0,1,0.3)),add = T,at=c(1*len/4,3*len/4),boxwex=len/8,pch='.')
legend(x = "bottomright",legend = c(paste("B cell:",round(bxp$stats[3,1],2),sep=" "),paste("T cell:",round(bxp$stats[3,2],2),sep=" ")),pch=20,col=c("Green","blue"))
cluster=3
mergedtabs <- mergetables()
all <- mergedtabs[[1]]
jlist <- mergedtabs[[2]]
clustertable <- addmargins(table(Bcell=all$Bcluster==cluster, Tcell=all$Tcluster==jlist[[cluster]]))
Cluster1<-all[all$Bcluster==cluster|all$Tcluster==jlist[[cluster]],]
bxp<-boxplot(Cluster1$TPMmeanB,Cluster1$TPMmeanT,plot=F,names=c("B cell","T cell"),range = 0)
verlap <-Cluster1[Cluster1$Bcluster ==cluster & Cluster1$Tcluster==jlist[[cluster]],]
len<-length(overlap$Ensembl.Gene.ID)
#  png(paste("/Users/rg12/Google Drive/PhD/
plot(y=overlap$TPMmeanT,x=overlap$TPMmeanB,
xlab = "TPM B cell",ylab="TPM T cell",
pch = 20,type="p",col = "Blue",cex=.5,
main = paste("Cluster",cluster,sep=" "))#,ylim=c(min(bxp$stats[1,2]),max(bxp$stats[5,2])),xlim=c(min(bxp$stats[1,1]),max(bxp$stats[5,1])))
#bxp<-boxplot(Cluster1$TPMmeanB,Cluster1$TPMmeanT,names=c("B cell","T cell"),col = c(rgb(0,1,0,0.3),rgb(0,0,1,0.3)),add = T,at=c(1*len/4,3*len/4),boxwex=len/8,pch='.')
legend(x = "bottomright",legend = c(paste("B cell:",round(bxp$stats[3,1],2),sep=" "),paste("T cell:",round(bxp$stats[3,2],2),sep=" ")),pch=20,col=c("Green","blue"))
plot(y=overlap$TPMmeanT,x=overlap$TPMmeanB,
xlab = "TPM B cell",ylab="TPM T cell",
pch = 20,type="p",col = "Blue",cex=.5,
main = paste("Cluster",cluster,sep=" "),
log='xy')#,ylim=c(min(bxp$stats[1,2]),max(bxp$stats[5,2])),xlim=c(min(bxp$stats[1,1]),max(bxp$stats[5,1])))
#bxp<-boxplot(Cluster1$TPMmeanB,Cluster1$TPMmeanT,names=c("B cell","T cell"),col = c(rgb(0,1,0,0.3),rgb(0,0,1,0.3)),add = T,at=c(1*len/4,3*len/4),boxwex=len/8,pch='.')
legend(x = "bottomright",legend = c(paste("B cell:",round(bxp$stats[3,1],2),sep=" "),paste("T cell:",round(bxp$stats[3,2],2),sep=" ")),pch=20,col=c("Green","blue"))
cluster=4
mergedtabs <- mergetables()
all <- mergedtabs[[1]]
jlist <- mergedtabs[[2]]
clustertable <- addmargins(table(Bcell=all$Bcluster==cluster, Tcell=all$Tcluster==jlist[[cluster]]))
Cluster1<-all[all$Bcluster==cluster|all$Tcluster==jlist[[cluster]],]
bxp<-boxplot(Cluster1$TPMmeanB,Cluster1$TPMmeanT,plot=F,names=c("B cell","T cell"),range = 0)
verlap <-Cluster1[Cluster1$Bcluster ==cluster & Cluster1$Tcluster==jlist[[cluster]],]
len<-length(overlap$Ensembl.Gene.ID)
#  png(paste("/Users/rg12/Google Drive/PhD/
plot(y=overlap$TPMmeanT,x=overlap$TPMmeanB,
xlab = "TPM B cell",ylab="TPM T cell",
pch = 20,type="p",col = "Blue",cex=.5,
main = paste("Cluster",cluster,sep=" "))#,ylim=c(min(bxp$stats[1,2]),max(bxp$stats[5,2])),xlim=c(min(bxp$stats[1,1]),max(bxp$stats[5,1])))
#bxp<-boxplot(Cluster1$TPMmeanB,Cluster1$TPMmeanT,names=c("B cell","T cell"),col = c(rgb(0,1,0,0.3),rgb(0,0,1,0.3)),add = T,at=c(1*len/4,3*len/4),boxwex=len/8,pch='.')
legend(x = "bottomright",legend = c(paste("B cell:",round(bxp$stats[3,1],2),sep=" "),paste("T cell:",round(bxp$stats[3,2],2),sep=" ")),pch=20,col=c("Green","blue"))
plot(y=overlap$TPMmeanT,x=overlap$TPMmeanB,
xlab = "TPM B cell",ylab="TPM T cell",
pch = 20,type="p",col = "Blue",cex=.5,
main = paste("Cluster",cluster,sep=" "),
log='xy')#,ylim=c(min(bxp$stats[1,2]),max(bxp$stats[5,2])),xlim=c(min(bxp$stats[1,1]),max(bxp$stats[5,1])))
#bxp<-boxplot(Cluster1$TPMmeanB,Cluster1$TPMmeanT,names=c("B cell","T cell"),col = c(rgb(0,1,0,0.3),rgb(0,0,1,0.3)),add = T,at=c(1*len/4,3*len/4),boxwex=len/8,pch='.')
legend(x = "bottomright",legend = c(paste("B cell:",round(bxp$stats[3,1],2),sep=" "),paste("T cell:",round(bxp$stats[3,2],2),sep=" ")),pch=20,col=c("Green","blue"))
setwd("/Volumes/lustre110/Sailfish/symlink/de/2")
all<-read.table("B-All.txt")
View(all)
all<-read.table("B-All.txt", sep=",", header = T)
View(all)
subset(all,TPMmeanB>1 & TPMmeanT>1)
dim(subset(all,TPMmeanB>1 & TPMmeanT>1))
sub1<-subset(all,TPMmeanB>1 & TPMmeanT>1)
sub2<-subset(sub1),Fold Change >0)
sub2<-subset(sub1),FoldChange >0)
sub2<-subset(sub1,FoldChange > 0)
sub3<-subset(sub1,FoldChange < 0)
5471+5012
sum(is.na(sub1$FoldChange))
is.na(sub1$FoldChange)[1:10]
View(sub1)
View(all)
View(sub1)
View(sub2)
sub4 <- subset(sub2,padj=<0.001)
sub4 <- subset(sub2,padj<=0.001)
sub4 <- subset(sub2,padj<=0.001 & FoldChange >=2)
sub4 <- subset(sub2,padj<=0.001)
sub4 <- subset(sub2,padj<=0.001 & FoldChange >=2)
sub5 <- subset(sub3,padj<=0.001)
sub5 <- subset(sub3,padj<=0.001  & FoldChange >=2)
sub5 <- subset(sub3,padj<=0.001  & FoldChange <=-2)
